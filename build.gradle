/**
 * 第九商城系统基于vert.x、ember.js、cqrs、kafka、mongo等最新web技术构建，是现代互联网技术开发的多用户商城系统的基石。
 * 他的目标如下：
 * 1、搭建一个多商户商城系统的基础业务平台
 * 2、使用最新的互联网技术、命令与查询可以独立发展规划
 * 3、全平台使用异步方式进行请求处理，高性能的支持大量并发，基于强健的异步队列方式进行消息处理
 * 4、全平台使用文档库+kv库的方式存储事件
 * 5、前端基于标准的js mvc架构，表现层不参杂任何后端处理语法逻辑
 * 6、以扩展的方式提供后端大数据分析平台，前端使用storm流式框架搜索商城中用户的任何交互事件【支持spark、hadoop】
 * 7、.......
 */
project.ext.buildType = "debug"

apply plugin: 'java'
//IDEA 插件
apply plugin: 'idea'
//WAR包插件
//apply plugin: 'war'
//SERVER Jetty
//apply plugin: 'jetty'

apply plugin: 'groovy'

//apply plugin: 'com.bluepapa32.watch'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileGroovy, compileTestJava]*.options*.encoding = 'UTF-8'

version = "1.0"

repositories {
    mavenCentral()
    jcenter()
}

//buildscript {
//    repositories {
//        jcenter()
//    }
//    dependencies {
//        classpath 'com.bluepapa32:gradle-watch-plugin:0.1.5'
//
//    }
//}

sourceSets {
    main {
        groovy {
            srcDirs = [
                    'src/main/java'
            ]
        }  // compile everything in src/ with groovy
        java { srcDirs = [] }    // no source dirs for the java compiler
        resources {
            files fileTree(dir: 'conf', include: '**/*.*')
            files fileTree(dir: 'webroot', include: '**/*.*')
        }
    }
}

//ext.buildTypeFile = file("settings.gradle")

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'aopalliance:aopalliance:1.0'
    compile 'c3p0:c3p0:0.9.1.1'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'
    compile 'com.alibaba:fastjson:1.1.31'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.1'
    compile 'org.apache.httpcomponents:httpasyncclient-cache:4.1.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile 'org.apache.httpcomponents:httpclient-cache:4.5.1'
    compile 'org.apache.httpcomponents:httpcore:4.4.4'
    compile 'org.apache.httpcomponents:httpcore-nio:4.4.4'
    compile 'org.apache.httpcomponents:httpmime:4.3.4'


    compile 'com.github.davidmoten:rxjava-jdbc:0.5.7'
    compile 'cglib:cglib:3.1'
//    compile 'org.freemarker:freemarker:2.3.22'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'org.apache.logging.log4j:log4j-api:2.3'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.3'
    compile 'org.apache.logging.log4j:log4j-web:2.3'
    compile 'org.apache.logging.log4j:log4j-core:2.3'
/*    compile("org.slf4j:slf4j-nop:1.7.12")*/
    compile 'com.gmongo:gmongo:1.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.0-rc3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0-rc3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0-rc3'
    compile 'org.mongodb:mongodb-driver:3.0.2'

    //vert.x依赖
    compile "io.vertx:vertx-core:3.2.0"
    compile "io.vertx:vertx-lang-groovy:3.2.0"
    compile 'io.vertx:vertx-web:3.2.0'
    compile 'io.reactivex:rxgroovy:1.0.3'

    testCompile 'junit:junit:4.11'
    testCompile 'org.codehaus.groovy:groovy-all:2.4.5'

    //release依赖

}

//debug，test，release分别独立的构建，他会使用不同的配置文件进行构建
task buildDebug(dependsOn:[build])
task buildTest(dependsOn:[build])
task buildRelease(dependsOn:[build])

//在图构建时，设定buildType属性
gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->

    if(taskGraph.hasTask(buildDebug)){
        project.ext.buildType = "debug"
    } else if (taskGraph.hasTask(buildTest)) {
        project.ext.buildType = "test"
    } else if (taskGraph.hasTask(buildRelease)) {
        project.ext.buildType = "release"
    }

}

//处理资源文件，根据debug，test，release分别独立的构建，他会使用不同的配置文件进行构建
processResources {
    //inputs.property("buildType", project.ext.buildType)
    doFirst {
        processResources.inputs.files.each { f ->
            println "资源文件名:${f.canonicalPath}"
        }
    }
    doLast {
        println "buildType类型：${project.ext.buildType}"
        //将处理的资源文件，遍历
        processResources.outputs.files.each { f ->
            f.eachFileRecurse {
                println "资源任务中输出的资源文件：${it.canonicalPath}"
                if (it.isFile()) {
                    def rname = it.canonicalPath;
                    it.renameTo(rname -= project.ext.buildType)
                }
            }
        }
        println "处理资源完毕：${processResources.outputs.files}"
    }
}


task copyToLib( type: Copy ) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

jar { dependsOn copyToLib }

jar {
    manifest {
        attributes "Main-Class":"com.matro.MainEntry", "Class-Path": configurations.compile.collect { "lib/" + it.getName() }.join(' ')
    }
}



// 内嵌jetty配置
//jettyRun {
//    webAppSourceDirectory file("$projectDir/src/main/webapp")
//    httpPort 8084
//    contextPath project.name
//    reload "automatic"
//    scanIntervalSeconds 1
//    stopPort 8085
//    stopKey 'SK'
//}
//
//jettyStop {
//    stopPort 8085
//    stopKey 'SK'
//}

//watch {
//    java {
//        files files('src/main/java')
//        tasks 'compileJava'
//    }
//    resources {
//        files fileTree(dir: 'src/main/resources',
//                include: '**/*.properties')
//        tasks 'processResources'
//    }
//}

